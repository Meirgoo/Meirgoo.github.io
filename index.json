[{"content":"虽然像Adobe、Microsoft等公司抢占市场的策略是不追究个人破解行为，更多的大团队也没听说因为这个被追责怎样的，但总归是该说的要说到。\n重要免责声明： 本文介绍了使用第三方工具绕过 Adobe 官方软件许可的方法。从事此类活动具有重大风险：\n法律后果： 使用未经许可或 “破解 ”的软件在大多数国家都是非法的，可能导致处罚。 安全风险： 第三方补丁工具可能包含恶意软件、病毒或间谍软件，会危及您的系统和数据。禁用 Windows Defender 等安全软件会进一步增加这种风险。 软件不稳定： 补丁软件可能无法正常运行、缺乏更新或变得不稳定，从而导致数据丢失或崩溃。 没有官方支持： 您在使用打补丁软件时遇到任何问题，都不会得到 Adobe 的官方支持。 道德问题： 软件开发人员的工作理应得到补偿。绕过许可破坏了这一点。 请自行承担风险，并充分了解潜在后果。建议始终使用官方许可的软件。\n前言：为何探讨此安装方案？ 在多媒体处理领域，Adobe的系列软件几乎是无法绕开的选择，相关的资源和教程也层出不穷。本文将分享一种结合官方下载渠道与第三方工具的安装思路。\n你可能会问，软件安装不就是点击几下的事吗？为何还需要特定方案？\n众所周知，Adobe软件每年都会更新，官方也会提供各类插件。虽然可以选择一个固定的旧版破解版本，但若想体验最新功能和官方插件，软件更新就无法避免。此外，官方安装包动辄数十GB，直接下载对带宽是个考验，而多数网盘分享又受限于下载速度，加速往往需要额外付费。\n因此，一种常见的思路是：通过官方渠道下载，再使用第三方工具进行激活。这样做可以充分利用本地网速，过程相对省心。主要缺点是通常只能获取最新版本的软件，这对系统配置有一定要求（这也是软件升级的普遍“副作用”）。如果你的电脑配置尚可，可以了解一下此方案。\n准备工作 稳定的网络连接 (用于下载Creative Cloud及后续软件)。 满足Adobe软件要求的电脑配置： Acrobat：一般无特殊要求。 图像/音频处理软件 (如 Photoshop, Illustrator, Audition)：通常建议16GB以上内存。 视频处理软件 (如 Premiere Pro, After Effects)：通常需要独立显卡和较大内存。 安装与激活步骤 下载并安装Adobe Creative Cloud：\n前往Adobe官方网站：https://www.adobe.com/download/creative-cloud。 下载Creative Cloud桌面应用程序并进行安装。 安装过程中可能需要注册或登录Adobe账户，按提示操作即可。 初步设置Creative Cloud：\nCreative Cloud安装完成后，可能会显示软件的试用选项。此时不要点击试用或打开任何Adobe软件。 直接关闭Creative Cloud应用程序。 获取并准备第三方激活工具 (GenP为例)：\n前往下载链接：https://wwuj.lanzoul.com/iNd4b2tmlgne。 下载后解压该文件。 Windows Defender警告处理：如果Windows Defender等安全软件阻止此工具运行或将其删除： 点击系统通知，找到被阻止的威胁。 选择“允许在设备上”，并执行操作。 如果文件已被删除，需重新解压。 运行激活工具进行首次搜索与破解：\n启动第三方激活工具 。 点击 \u0026ldquo;Search\u0026rdquo;，工具会自动搜索已安装的Adobe Creative Cloud组件。 搜索完成后，点击 \u0026ldquo;Patch\u0026rdquo; 。 在此过程中，该工具可能会自动关闭Adobe Creative Cloud并完成破解。 通过Creative Cloud下载所需Adobe软件：\n重新打开Adobe Creative Cloud。 如果破解成功，之前显示的“试用”选项可能会消失，变为“安装”。 此时，你可以选择并安装所需的Adobe软件，包括官方提供的插件。 重要：软件安装完成后，暂时不要打开任何已安装的Adobe应用程序。 再次运行激活工具进行全面破解：\n所有需要的Adobe软件通过Creative Cloud安装完毕后，再次完整执行一遍步骤4（启动GenP -\u0026gt; Search -\u0026gt; Patch）。 这一步的目的是破解所有新安装的Adobe应用程序。 破解完成后，尝试打开一个Adobe软件。如果没有出现试用提示或激活弹窗，则表示破解已成功。之后便可正常运行。 软件更新与插件安装后的处理：\n如果需要更新已安装的Adobe软件或安装新的官方插件，可以直接通过Adobe Creative Cloud进行。 更新或新安装完成后，重复执行一次激活流程（步骤4或步骤6），以确保新组件也被破解。 ","permalink":"https://meirgoo.net/tech/adobe/","summary":"通过Creative Cloud下载最新官方版本Adobe软件的指南，以及破解使用。","title":"Adobe Creative Cloud官方最新版安装和破解指南"},{"content":"引言 1993年，id Software为经典游戏《DOOM》设计的WAD（Where’s All the Data）文件格式，开创了用户创造内容的社区先河，直到今天，模组内容的分享和探讨已经发展出了一个庞大的内容社区。我个人认为这个文件扩展名从今天来看恰如其分，你知道你创造了多少数据吗？你知道这些数据都在哪里吗？你知道哪些数据是真正属于个人的吗？\n可以说自迈入互联网时代之后，在数据层面上，公与私的边界，虚拟与现实的边界或许已经不再那么明确。\n从Notion看云端数据的可用性 最早我的网站是使用wordpress部署在服务器上，后来考虑到个人只用到了静态页面，服务器的作用完全没有体现，于是就参考数种静态网站部署方式，最早的时候，我看中了Notion。\nNotion是一款优秀的国外笔记软件，在GUI设计上遥遥领先其余一众笔记软件，并且可以轻松的将私有库公开部署变成一个独立的站点，对于技术苦手以及更想专注于内容创作的人来说是个很好的选择，可以兼顾静态站点和作为个人日常笔记软件使用，大量配置只需要一个配置页的表格就可以处理，相对于其他静态网站是个相当优秀的选择。\n但在我看来，Notion最大的痛点在于——服务几乎完全依赖云端，虽然是一款需要下载安装到本地的软件，但是页面的储存加载编辑是几乎完全云同步的，脱离网络的情况下几乎不可用，有本地备份功能，但在设计上，本地文件更多是辅助备份使用，而不是作为日常编辑查看等操作的源文件使用。若Notion运营出现故障，或因特殊的网络环境导致访问受阻，所有数据都可能面临无法找回的风险。也就是说我的数据，实际上并不完全在我手中，只是漂浮在云端。\n之后我痛定思痛，开始尝试寻找一种在数据寿命、隐私、可访问性多方面更优的存储方式。\n我是一个十几年的云服务用户，云，在我看来是一个相当好用的互联网服务，试想一下，如果更换了设备或者更换了系统，那么转移数据绝对是一项大工程，如果有日常整理文件的习惯还好，但如果完全不做整理，桌面上囤积着大量文件，那想必也就没有了什么转移的想法，还有大量用户直接使用微信或者QQ等自动保存文件，我相信其中很多人连自己的文件在哪里都搞不清楚。\n从过去至今，我用过不少的各类网盘或者云服务，Notion之外，我最常使用的是微软的Onedrive，原因无他，相对便宜，可访问性好，在国内速度还可以，和Windows集成，容量够用。但如果你问我，重要数据可以长期大量存放吗？微软可信吗？那我的回答全部都是否。\n首先我不敢说位于境外且没有文件审核的网盘未来如何，其次即使是微软本身也不是没有过丢失用户文件造成损失的先例。因此完全可以讲一个暴论，云端数据，天然带有不同程度的不可控的风险。因此对于数据内容和存储方式的选择至关重要。\n数字方舟建造指南：在多维平衡中寻求最优解 理想的数据存储方案，如同寻找三体运动中的稳定解，需要在多个维度间寻求精妙平衡：\n安全 vs. 便捷：\nNAS像自家金库，安全但需操心维护（防潮、防火、硬件故障）；网盘则像银行保险箱，省心却可能受制于人。 我的方案：私密照片存放在加密硬盘，工作文档使用企业云盘，至于可爱的猫咪图片？当然是上传到宠物社区，接受“云吸”的快乐。 当下 vs. 未来：\n用Word写稿总担心.doc格式某天会变成无人能识的“数字甲骨文”。如今我转向 Markdown 阵营，其纯文本特性仿佛给文字买了份“终身保险”。纯文本的质朴反而比当年花哨的富文本格式更经得起时间考验。选择开放、通用的格式至关重要。 公有 vs. 私有：\n将游记同步到博客，像是向大海投入漂流瓶，某天竟意外收到南极科考队员的评论，这是公开分享的惊喜。 而私密日记则使用 Veracrypt 等工具加密，密码强度高到自己都可能偶尔输错。这种公私分明的存储策略，为我的数据世界划分出了清晰的“客厅”与“卧室”。 现代人的“数字生命”：数据构筑的第二人生 正如现实生活中的“断舍离”，并非所有数字痕迹都有长久价值。网页浏览时长、屏幕注意力分布，这些数据都有统计方式，但对个人而言大多是过眼云烟。并且在一定程度上来说，这些数据由个人产出，模糊了虚拟和现实的边界，由数字身份绑定到了实际的个体身上但却并不真正归属于个人，这是之后讨论的另一个话题。\n在这些所有的数据中，真正需要关注的，往往是那些稀缺且不可再生的数据。\n我衡量数据价值的一个常用标准是其**“可再生性”**，这直接关联到数据的寿命和可恢复性。例如，一份以易失方式分享的稀有资源，一旦错过便可能永久失去，这类数据就属于不可再生，需要及时珍藏，经常混迹论坛、贴吧的朋友可能有这种经历，看标题内容找到了想要的资源，一看发文时间心就先凉了半截，甚至都不需要上古时期的内容，几个月前的分享内容无法查看已经是家常便饭，至于更早的，例如净网行动之前的数据，更是难得一见。\n相比之下，热门软件安装包、公开发行的游戏文件等，可以大胆推论为**“半永生”数据**。它们通常由稳定组织提供，即便原始来源失效，庞大的用户保有量也使得它们能通过P2P网络等方式重现，近似于某种形式的“永生”。\n但这种公有领域的“永生”模式，并不适用于高度个人化的数据。那么，**个人数据应如何选择保存方式，以确保其安全与寿命呢？**在我看来，大致分为这么几类：\n本地硬盘：如同贴身的日记本，私密且直接。 私有仓库（如加密硬盘、私有Git仓库）：好比上了锁的保险箱，安全可控。 公开部署（如博客、公共分享）：仿佛临街的橱窗，展示却也意味着部分控制权的让渡。 守护数据生命线：3-2-1法则与我的实践 在数据存储领域，有一个经典的3-2-1备份法则：\n3 份文件：一份原件，两份备份。 2 种介质：数据存储在至少两种不同类型的存储介质上（如硬盘、U盘、光盘、云端）。 1 份异地：至少有一份备份存放在与原数据不同的地理位置。 这听起来复杂，实践起来也确实不简单。多数家庭不会配置NAS（网络附属存储），手动进行多介质、异地备份更是费时费力。我个人虽未完全遵循此法则，但在数据备份与管理上，更倾向于网络备份与关键数据本地化结合。\n对于提供稳定服务且不涉及隐私的数据，我会交由大公司处理，例如我保存的一些本地MP3，想收藏的电子书，保存到任何一个稳定的网盘都没有任何问题。 对于少量极其重要的文本内容（如个人笔记、代码片段），我会存放在 GitHub。我相信其作为代码版本控制平台的专业性，在数据备份和持久化方面远胜个人方案，且版本控制功能对于追踪历史和增量更新极为便利。 公开存放也是一种方案，对于不涉及任何个人隐私，纯粹是个人认为有纪念意义的数据，可以直接找个博客网站或者视频网站公开存放，对于我的一些游戏录像我是这么做的。 说回我的网站迁移，尽管当时在Notion中记录的内容不多，价值有限，但这种“不稳定感”促使我寻求替代方案。最终，我选择了GitHub Pages + 本地Markdown文件 的方式搭建了现在的博客。虽然世上没有绝对的永恒，但我相信这个组合的稳定性远超纯云端笔记服务。我可以轻松实现本地与云端的同步，即便在最坏情况下（如GitHub服务不可用），我依然保有本地所有数据的完整副本。这种所有权，是Notion无法给予的。\n网络备份看似理想，尤其在有可靠服务商的前提下，对非专业用户而言，能显著延长数据寿命。但这引出了一个核心问题：互联网上的数据，所有权究竟归谁？\n便利性与控制权：一场永恒的博弈 在18年的中国发展高层论坛上，百度董事长兼CEO李彦宏表示，“中国人对隐私问题的态度更开放，也相对来说没那么敏感。如果他们可以用隐私换取便利、安全或者效率。在很多情况下，他们就愿意这么做。当然我们也要遵循一些原则，如果这个数据能让用户受益，他们又愿意给我们用，我们就会去使用它的。我想这就是我们能做什么和不能做什么的基本标准。”\n这番言论大概是没引起多少争议，因为全是骂的，但百度是这么说的，而且百度也是这么做的，从百度替换用户文件、窃取用户文件并收费、百度千金开盒用户几件事上看，用户的任何数据，在百度公司眼里，那都是公司的资产，而非用户的数据。服务商本身，有时即是最大的风险源。\n因此当我们拥抱云存储的便利时，实际上也在面临一个现代性的悖论：你愿意为了多少便利，放弃多少数据控制权与隐私？\n一个核心问题值得深思：用户存储在云端的数据，究竟属于用户还是服务商？法律上，数据所有权无疑属于用户，服务商只是“代为保管”。但若依据相关法规，服务商被要求审查用户数据，又该如何平衡用户隐私？厂商是否有权审查、修改甚至删除用户存储的合法文件？由此产生的隐私泄露责任又该由谁承担？\n从过往案例看，部分网盘服务商并未严格遵守个人隐私保护承诺。此外，国内互联网服务普遍依赖手机号实名认证。若更换手机号后，旧号码被他人购得，未及时解绑的账户数据便面临完全泄露的风险。\n云盘服务也易形成强大的用户粘性与垄断渠道。设想一下，当你在某手机厂商自带的云服务中存储了数十GB的个人数据，下次更换手机时，还会轻易选择其他品牌吗？数据迁移的成本和麻烦，往往会“温柔地禁锢”用户，使其在无形中丧失部分选择权。\n因此，在享受互联网便利的同时，也应该有一个概念，我产生了多少数据，互联网公司又拿走了哪些数据，哪些服务能接触到哪些数据？切莫为了些许便利模糊掉私有和公有的边界，没有道德和法律约束的技术都会造成对个人领域的侵犯。\n守护你的数字存在 我有一篇很喜欢的文章，博尔赫斯的《通天塔图书馆》，文字无限可能的排列似乎是个数学论证，好比无数只猴子在无限的时间内终究会打出莎士比亚全集一样，但我想从另一个角度解读。\n文字，照片等等一切信息的组合，它们的价值都是基于一个前提，那就是人类的解读，没有人解读的莎士比亚只是一些符号的组合排列而已，有人赋予了价值，数据才有了价值，当我们用NAS存储影像，用Git版本控制记录思想轨迹，本质上都是在虚拟世界中进行一场对抗信息熵增的努力，用有序的存储延展意义的边界。\n下次当你点击“上传”按钮前，不妨扪心自问：如果明天所有云服务同时消失，我的数字存在能在何处完成一次“文明重启”？ 这个问题的答案，便是你的数据存在的立足之处。\n","permalink":"https://meirgoo.net/markdown/wad/","summary":"一次网站迁移引发的对个人数据寿命与所有权的深思。在云服务普及的今天，我们的数据真的安全吗？本文探讨数字时代个人数据所有权、云存储风险、隐私保护，并提供实用的数据保存策略，助你守护宝贵的数字遗产。","title":"我的数据在哪里？从《DOOM》WAD谈起：反思数字时代的数据寿命、所有权与安全感"},{"content":"前言：在互联网上拥有自己的一块地 个人建站的热潮还是在零几年，那时候互联网就像一片无限大的荒原，也有一批站长在那个时间发家致富。可以确定的是，现在已经不是当时那个遍地都是机会的时代，但互联网依然是那片几乎无限大的土地，大到任何人都可以在中间几乎零成本的圈出自己的一块地。本文将手把手教你，如何在数字世界中划出并耕耘你的“一亩三分地”。\n准备工作 如你所见这个页面就是基于Hugo（雨果）部署在Github Pages的一个静态站点。接下来的教程将以此为蓝本。在开始之前，你需要准备：\n一定的英语和计算机基础：后续操作多为英文界面，且需使用命令行。有基础会更顺畅，但零基础用户也可借助翻译工具和详细指引尝试。\nWindows 10 或 Windows 11 操作系统：Linux系统命令行操作更为便捷，且相关资源丰富。但考虑到多数中文用户使用Windows，本教程将以Windows环境为主。\n可顺畅访问GitHub的网络环境：GitHub是全球最大的开源社区，将使用其提供的GitHub Pages功能免费部署静态网站（有一定使用限制）。由于Github在国内存在DNS污染，因此可能存在访问不稳定的情况，访问Github对网络提供商，地点等等有一定要求，请先测试能否正常访问 github.com。若无法访问，需自行寻找解决方案。访问通畅后，请使用邮箱注册一个GitHub账户。\n详细步骤：从零到一搭建你的博客 第一部分：本地环境搭建与Hugo安装 打开 Microsoft Store： 在Windows 10/11系统中，找到并打开内置的“Microsoft Store”。如果曾被卸载，可查找相关脚本恢复。\n安装/更新 App Installer： 在Microsoft Store中搜索并安装/更新 \u0026ldquo;App Installer\u0026rdquo;。这是微软官方的包管理器（winget），安装后可通过命令行高效安装软件。\n以管理员模式运行 PowerShell：\n按下 Win 键（键盘左下角Ctrl和Alt之间的徽标键） + R 打开“运行”对话框。 输入 powershell。 同时按下 Ctrl + Shift + Enter 以管理员身份运行。若有授权弹窗，请选择“是”。 看到蓝色窗口，即表示成功进入PowerShell命令行环境。 验证 winget 包管理器： 在PowerShell中输入以下命令并按回车执行（后续命令行操作均为此方式，不再赘述）：\nwinget 如果看到一长串帮助信息列表，说明winget已正常工作。\n（可选）更换 winget 源以提升国内访问速度： winget默认源在国内访问可能较慢或者完全无法访问。可更换为国内镜像源，如中科大源：\nwinget source add ustc https://mirrors.ustc.edu.cn/winget-source 查看当前已配置的源：winget source list 移除某个源（例如移除名为msstore的源）：winget source remove msstore 恢复默认源设置：winget source reset --force 安装 Hugo 和 Git：\n首先，搜索Hugo，确认可以从源中找到： winget search hugo 如果搜索不到，请检查源配置及网络连接。 搜索结果中通常有Hugo的多个版本（标准版、扩展版等）。部分主题需要扩展版（Extended）功能，建议一步到位安装扩展版： winget install Hugo.Hugo.Extended 接着，安装Git，后续部署会用到： winget install Git.Git 验证 Hugo 安装并切换 PowerShell 环境：\n关闭当前的管理员PowerShell窗口。 重新打开一个新的、无管理员权限的PowerShell窗口。这点很重要，因为管理员与普通用户的默认路径不同。上一步换源等操作由于要求管理员权限，因此相关操作默认在系统目录，而创建站点应在用户目录下进行。 在新PowerShell窗口中输入： hugo version 如果能看到Hugo的版本信息，例如 hugo v0.xx.x-...，则表示安装成功。 接着输入： hugo 此时应看到类似如下错误提示，这是正常的，表示当前目录不是一个Hugo站点： Error: Unable to locate config file or config directory. Perhaps you need to create a new site. Run `hugo help new` for details. 第二部分：创建并配置你的Hugo站点 确定建站位置并创建站点： 你的个人网站需要一个文件夹来存放所有相关文件。新打开的PowerShell默认路径通常是用户文件夹（如 C:\\Users\\你的用户名）。 常用命令行操作：\n进入目录：cd 目录名 返回上一级：cd .. 创建新目录：mkdir 目录名 例如，在用户目录下创建一个名为 myblogs 的文件夹，并在其中创建名为 FirstSite 的站点：\nmkdir myblogs # 在用户目录下创建myblogs文件夹 cd myblogs # 进入myblogs文件夹 hugo new site FirstSite # 创建名为FirstSite的新站点 cd FirstSite # 进入FirstSite站点根目录 完成此步后，myblogs\\FirstSite 目录即为你的站点根目录。之后所有针对此站点的操作，都需要先通过 cd 命令进入此根目录进行。\n安装并配置主题： 新创建的Hugo站点没有默认主题。你可以在 Hugo官方主题站 寻找喜欢的主题。\n首先，在站点根目录（即 FirstSite 目录）下初始化一个Git仓库： git init 选择一个主题，例如官方教程默认的Ananke主题。在其GitHub页面找到项目地址，使用以下命令将主题作为子模块（submodule）克隆到本地站点的 themes 文件夹下： git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 注意：不同主题支持特性各异，具体使用方法需查阅其文档。本站使用的主题为PaperMod，后续会另文分享其详细配置。 配置站点使用该主题。打开站点根目录下的 hugo.toml 文件（如果没有，旧版Hugo可能是config.toml，但hugo new site默认创建hugo.toml）。 不建议使用 echo \u0026quot;theme = 'ananke'\u0026quot; \u0026gt;\u0026gt; hugo.toml 命令，因PowerShell编码问题可能导致字符错误。建议直接用文本编辑器（如VS Code、记事本）打开 hugo.toml 进行编辑。 修改或添加以下基本配置： baseURL = \u0026#39;[https://yourusername.github.io/](https://yourusername.github.io/)\u0026#39; # 预先填入你未来的GitHub Pages地址 languageCode = \u0026#39;zh-cn\u0026#39; # 或 \u0026#39;en-us\u0026#39; 等 title = \u0026#39;我的第一个博客\u0026#39; # 你的网站标题 theme = \u0026#39;ananke\u0026#39; # 对应 themes 文件夹下的主题名 # 以下是Ananke主题的一些推荐配置，可参考其文档添加 # SectionPagesMenu = \u0026#34;main\u0026#34; # Paginate = 3 # 主页每页显示文章数 # googleAnalytics = \u0026#34;\u0026#34; # 谷歌分析ID # enableRobotsTXT = true # [sitemap] # changefreq = \u0026#34;monthly\u0026#34; # priority = 0.5 # filename = \u0026#34;sitemap.xml\u0026#34; # [params] # text_color = \u0026#34;\u0026#34; # author = \u0026#34;你的名字\u0026#34; # favicon = \u0026#34;\u0026#34; # site_logo = \u0026#34;\u0026#34; # description = \u0026#34;我的个人博客描述...\u0026#34; # # choose a background color from sincerity, LCF, or darkblue # background_color_class = \u0026#34;bg-sincerty\u0026#34; # recent_posts_number = 3 请将 baseURL、title 和 params 中的内容替换为你自己的信息。 本地预览你的网站： 在站点根目录下运行：\nhugo server Hugo会自动编译网站并启动一个本地服务器。当看到类似如下输出时：\nWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 说明编译成功。在浏览器中访问 http://localhost:1313/ 即可看到你的网站。在PowerShell中按 Ctrl+C 可停止本地服务器。\n第三部分：部署到GitHub Pages 理解部署原理： 上一步已成功在本地创建并预览了静态网站。要让公网用户访问，通常认为需要服务器、域名、备案等。但对于纯静态网站，有多种免费方案，如Vercel、GitHub Pages。它们虽有带宽流量限制，但对访问量不高的个人站点绰绰有余。本文选择GitHub Pages。\n配置Git全局信息及SSH密钥：\n如果之前未安装Git，请返回步骤6安装。 配置Git的全局用户名和邮箱（请替换为你在GitHub注册的用户名和邮箱）： git config --global user.name \u0026#34;你的GitHub用户名\u0026#34; git config --global user.email \u0026#34;你的GitHub邮箱\u0026#34; 生成SSH密钥对，用于本地与GitHub的安全通信： ssh-keygen -t rsa -C \u0026#34;你的GitHub邮箱\u0026#34; 按几次回车使用默认设置（默认存储位置、无密码）。 注意！ SSH私钥（默认为 id_rsa）和公钥（id_rsa.pub）是你的身份凭证，请妥善保管，勿随意泄露私钥。 登录GitHub网站，点击右上角头像 -\u0026gt; Settings -\u0026gt; 左侧导航栏 SSH and GPG keys -\u0026gt; 点击 New SSH key。 Title处为密钥填写一个名称（如 MyLaptopKey）。 用记事本打开公钥文件（默认路径为 C:\\Users\\你的用户名\\.ssh\\id_rsa.pub），复制其全部内容，粘贴到GitHub的 Key 文本框中，点击 Add SSH key。 在GitHub上创建仓库并配置部署令牌： 需要创建两个仓库：一个用于存放Hugo站点的源代码（私有），另一个用于托管生成的静态网站文件（公开）。\n创建公开的Pages仓库：\n点击GitHub左上角猫头鹰图标返回首页，选择 Repositories -\u0026gt; New。 仓库名称必须严格为：你的GitHub用户名.github.io。 选择 Public (公开)。 建议不勾选 \u0026ldquo;Add a README file\u0026rdquo;。 创建完成后，进入该仓库的 Settings -\u0026gt; Pages 选项卡，在 Build and deployment下的 Branch 部分，选择 main 分支（如果你的主分支是 main），文件夹选 / (root)，然后点击 Save。 创建私有的源文件仓库：\n再次点击 New 创建仓库。 仓库名称可随意（如 my-hugo-blog-source）。 选择 Private (私有)，以保护你的原始博文和配置。 同样建议不勾选 \u0026ldquo;Add a README file\u0026rdquo;。 生成并配置部署令牌 (Personal Access Token - PAT)： 此令牌将允许你的私有仓库通过GitHub Actions自动部署到公开的Pages仓库。\n点击GitHub右上角头像 -\u0026gt; Settings。 拖到页面最底部，左侧选择 Developer settings。 在 Personal access tokens 下选择 Fine-grained tokens (推荐) 或 Tokens (classic)。这里以 Fine-grained tokens 为例： 点击 Generate new token。 Token name: 给令牌起个名字，如 HUGO_DEPLOY_ACTION。 Expiration: 选择有效期（如 \u0026ldquo;No expiration\u0026rdquo;，或自定义）。 Repository access: 选择 Only select repositories。在下拉列表中，仅选择你刚创建的公开仓库 (即 你的GitHub用户名.github.io)。 在下方 Permissions 部分，找到 Repository permissions -\u0026gt; Contents，将其权限设置为 Read and write。 点击 Generate token。立即复制生成的令牌字符串并妥善保存，关闭页面后将无法再次查看。 回到你的私有源文件仓库 (my-hugo-blog-source) 的 Settings -\u0026gt; Secrets and variables -\u0026gt; Actions。 点击 New repository secret。 Name: 输入 ACTIONS_DEPLOY_KEY (此名称将用于后续的GitHub Actions配置文件中)。 Secret: 粘贴上一步复制的个人访问令牌。 点击 Add secret。 创建GitHub Actions Workflow文件： 在你的本地Hugo站点根目录 (FirstSite 文件夹) 中，创建以下目录和文件结构： .github/workflows/hugo-deploy.yaml 即先创建 .github 文件夹，再在其内创建 workflows 文件夹，最后在 workflows 文件夹内创建 hugo-deploy.yaml 文件。 将以下内容复制到 hugo-deploy.yaml 文件中：\nname: Deploy Hugo site to Pages on: push: branches: - main # Set a branch to deploy from (e.g., main, master) pull_request: jobs: deploy: runs-on: ubuntu-latest # Using ubuntu-22.04 is also fine concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - name: Checkout uses: actions/checkout@v4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v3 # Using v3 for stability with: hugo-version: \u0026#39;latest\u0026#39; # Or a specific version e.g., \u0026#39;0.111.3\u0026#39; extended: true - name: Build run: hugo --minify # Minify static assets - name: Deploy uses: peaceiris/actions-gh-pages@v3 # Only run on direct pushes to the main branch if: github.ref == \u0026#39;refs/heads/main\u0026#39; \u0026amp;\u0026amp; github.event_name == \u0026#39;push\u0026#39; with: # This token is created in your private repository\u0026#39;s secrets personal_token: ${{ secrets.ACTIONS_DEPLOY_KEY }} # Target repository (your public GitHub Pages repo) external_repository: YourGitHubUsername/YourGitHubUsername.github.io publish_branch: main # Deploy to the main branch of the target repo publish_dir: ./public # Hugo\u0026#39;s default output directory # cname: your.customdomain.com # Uncomment if you have a custom domain keep_files: false # Recommended to clean up old files commit_message: ${{ github.event.head_commit.message }} # Use original commit message 请务必修改以下部分：\non.push.branches: 确保 - main 对应你私有仓库中存放Hugo源码的主分支名。 external_repository: 将 YourGitHubUsername/YourGitHubUsername.github.io 替换为你的GitHub用户名和对应的公开Pages仓库名。 personal_token: secrets.ACTIONS_DEPLOY_KEY 中的 ACTIONS_DEPLOY_KEY 必须与你在私有仓库中设置的Secret名称完全一致。 cname: 如果你没有自定义域名，请将此行删除或注释掉 (在行首加 #)。不要在此处填写 用户名.github.io。 将本地站点推送到GitHub私有仓库并触发部署：\n回到PowerShell，确保当前路径是你的Hugo站点根目录 (FirstSite)。 将本地仓库关联到GitHub上的私有远程仓库（请替换URL）： git remote add origin git@github.com:YourGitHubUsername/my-hugo-blog-source.git # 或者使用HTTPS: # git remote add origin [https://github.com/YourGitHubUsername/my-hugo-blog-source.git](https://github.com/YourGitHubUsername/my-hugo-blog-source.git) git branch -M main #确保本地主分支为main 将所有文件添加到Git暂存区，提交更改，并推送到远程私有仓库： git add . git commit -m \u0026#34;Initial commit: Setup Hugo site and deployment workflow\u0026#34; git push -u origin main 推送成功后，进入你GitHub上的私有仓库页面，点击 Actions 选项卡，应能看到名为 \u0026ldquo;Deploy Hugo site to Pages\u0026rdquo; 的工作流正在运行或已完成。 等待几分钟（首次部署可能稍长），工作流成功完成后，你的公开仓库 (你的GitHub用户名.github.io) 中会包含由Hugo生成的静态网站文件。 此时，在浏览器中访问 https://你的GitHub用户名.github.io 即可看到你的博客了！ 更新与发布新内容： 网站搭建完成后，更新内容流程如下：\n在你的本地Hugo站点根目录 (FirstSite) 下，content 文件夹是存放你博文的地方。通常，文章会放在 content/posts/ 或 content/blog/ 等子目录中，具体取决于主题的组织方式。 创建新文章（例如在 posts 目录下创建 my-first-post.md）： hugo new posts/my-first-post.md 这会在 content/posts/ 目录下生成一个Markdown文件模板。 推荐使用VS Code等编辑器打开并编辑此 .md 文件。VS Code可通过winget安装： winget install Microsoft.VisualStudioCode 编辑完成后，在本地预览检查：hugo server。 确认无误后，将更改推送到GitHub私有仓库以触发自动部署： git add . git commit -m \u0026#34;feat: Add new blog post about XYZ\u0026#34; # 替换为有意义的提交信息 git push GitHub Actions会自动重新构建并部署你的网站。 结语与展望 恭喜你！至此，你已完成了个人博客的搭建与部署。本文详述了我个人建站的完整步骤，至于DNS配置、购买并绑定自定义域名、更高级的页面定制与SEO优化等，都是可以继续探索的方向。后续会逐步完善和更新相关内容。\n","permalink":"https://meirgoo.net/tech/hugo-website/","summary":"从本站点构建与部署的实际经验出发，教你零基础使用hugo构建自己的个人博客并部署在Github pages中，在互联网中开辟自己的半永久的一亩三分地。","title":"零基础构建个人博客：Hugo搭建和GitHub Pages部署完全指南"}]