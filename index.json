[{"content":"前言 谈及多媒体处理，Adobe的软件是绕不开的一个话题，相关资源和教程也是一抓一大把，这里就老调重弹，分享一下我自己的安装方案。\n诶，不就一个软件安装，点一下的事嘛，怎么还有这种那种方案呢？\n众所周知，Adobe软件是每年都有更新的，而且官方会提供一些插件，当然可以选择一个破解的固定版本使用，但如果想要使用最新版以及插件，那更新是绕不过去的，况且安装包的下载也是个问题，动辄十几二十几GB的安装包，没有哪家会无偿提供这么大的下载带宽，多数网盘的分享方案也不能指望网盘的小水管慢慢下载，加速又是一笔费用。\n因此我常用的一套方案就是官方下载加第三方破解，网速完全利用，也非常省心，缺点就是只能下载最新版，对系统配置有一定要求，这也是软件升级的负面效果，如果电脑配置还不错的话，那可以尝试一下这套方案。\n准备 网络连接 满足需要安装软件的配置，Acrobat一般没什么要求，图像音频等处理一般要求16GB以上内存，视频处理一般需要独立显卡。 步骤 前往 https://www.adobe.com/download/creative-cloud 下载创意云并且安装，过程可能需要注册一个账户，直接注册登录就可以。\n安装后所有软件都会显示使用，不要管，直接关闭软件，不要试用。\n下载文件 https://wwuj.lanzoul.com/iNd4b2tmlgne 并启动。如果显示被Windows defender阻止，点击该通知，在显示的威胁下面选择“允许在设备上”并且执行操作后重新运行，软件被删了就重新解压一个。\n运行GenP，点击Search，等待软件自动搜索安装的Adobe软件，搜索完成后点击Patch。在这个过程中软件会自动关闭Adobe创意云并完成破解。\n重新打开Adobe创意云，如果成功破解则会发现所有试用选项消失，变成下载，此时可以随意安装软件，包括官方提供的插件，注意安装完成后不要打开任何软件。\n安装完成后重复第四步一次，此时会把所有安装的Adobe软件破解，如果打开软件没有试用提示即破解完成，之后可以随意运行。\n如果需要更新软件或者安装插件，可以使用创意云直接更新或者安装，安装完成后重新运行一次破解流程即可。\n特殊情况 如果破解失败可通过邮件通知我检查破解软件更新。\n","permalink":"https://meirgoo.net/tech/adobe/","summary":"Adobe软件最新官方版下载及破解。","title":"Adobe安装"},{"content":"前言 个人建站的热潮还是在零几年，那时候互联网就像一片无限大的荒原，也有一批站长在那个时间发家致富。可以确定的是，现在已经不是当时那个遍地都是机会的时代，但互联网依然是那片几乎无限大的土地，大到任何人都可以在中间几乎零成本的圈出自己的一块地。本文会教你如何划出自己的一块地皮。\n准备 如你所见这个页面就是基于Hugo（雨果）部署在Github Pages的一个静态站点，之后的内容也基于这一点。\n为此你需要准备：\n一点点英语和计算机基础。后续的操作大多是英语界面，也需要使用命令行操作，完全不会也不是不行，靠网页翻译和说明硬啃吧，难度肯定会更大。\nwindows10或者windows11操作系统。\nlinux本身命令行操作会更简单一些，并且可以默认linux用户基础更好，资料更全，考虑到中文用户大多应该是windows系统，故以windows为主\n可以访问Github的网络环境。Github是全球最大的开源社区，这里使用Github提供的Pages功能，该功能支持为项目部署静态网站（免费，但有一定使用限制），由于Github在国内存在DNS污染，因此访问Github对网络提供商，地点等等有一定要求，可以访问github.com测试，如果无法访问需要自行查找解决方案。\n可以访问时自行使用邮箱注册账户。\n步骤 打开系统的Microsoft Store，即微软商店，在windows10和windows11内置，如果被卸载，可参考我的脚本列表中恢复命令。\n安装/更新 App Installer，该软件是微软官方的包管理器，安装该软件后可以用命令行安装软件，省去大量操作步骤。\n以管理员模式运行powershell，使用win（徽标键，标准键盘空格左边第二个）+R打开运行，输入powershell，之后按ctrl+shift+enter（同时按住ctrl和shift同时点一下回车），如果弹出授权，同意即可，当能看到一个蓝色窗口时，欢迎来到命令行的世界。\n命令行的操作是输入指令按回车执行，后续一切该操作不做说明。运行\nwinget 如果能看到一串列表，那么说明包管理器正常。\n换源，winget的内置源或许并不适合国内网络环境的访问，这里使用的是中科大的源，有其他的源可以把ustc更换为任意名称，链接更换为源地址。\nwinget source add ustc https://mirrors.ustc.edu.cn/winget-source 想要检查有什么源可以使用：\nwinget source list 想要移除源可以使用（将星号以及星号之间的内容更换为源列表的名称）：\nwinget source remove *winget* 想恢复默认源可以：\nwinget source reset --force 安装hugo，可以使用以下指令检查是否可以从源搜索到软件：\nwinget search hugo 如果无法搜索到软件需要再检查是否成功配置源以及网络连接。之后安装Hugo。如果顺利搜索，可以看到这里有Hugo的三个不同版本，分别是标准版，扩展版和开发版，开发版并不适合一般用户使用，部分主题需要使用扩展版，因此一步到位直接安装扩展版Hugo。\nwinget install Hugo.Hugo.Extended 同时再顺便安装一个git，等下要用。\nwinget install git.git 关闭powershell，开启一个新的无管理员权限的powershell，这里务必使用无管理员权限的powershell运行，因为两者默认路径是不同的，第5步中由于换源，路径在系统目录下，现在需要在用户目录下进行下一步，因此直接新建无管理员权限的powershell最直接。使用指令：\nhugo 如果看到如下输出表示软件安装无误:\nTotal in 1 ms Error: Unable to locate config file or config directory. Perhaps you need to create a new site. Run `hugo help new` for details. 确认建站位置，你的个人网站是需要一个文件夹用来存放的，在上一步中刚开启的powershell默认执行路径是用户文件夹，，即“C:\\Users\\My\\用户名”，也是打开文件管理器看到左侧一串桌面等文件夹的上一级，对于没有学过命令行操作的用户来说，可以使用这样几个指令在命令行中操作文件夹。\n进入目录:\ncd 目录名 回到上一级目录，这里的两个点表示上一级，注意是英文模式下的句号：\ncd .. 创建新目录：\nmkdir 目录名 比如如果想要在用户目录下新建一个站点目录，并且在里面创建站点FirstSite应该怎么办呢？\nmkdir site cd site hugo new site FirstSite cd FirstSite 完成这一步，就会有一个site\\FirstSite目录作为站点的根目录，同时进入这个目录下，之后的所有操作都要在这里进行，也就是每次操作网站都需要先打开一个无管理员权限的powershell，然后使用cd指令进入根目录处理。\n创建完网站后是没有默认主题的，可以在 https://themes.gohugo.io/ 处寻找喜欢的主题，想要使用这些主题，需要先在网站根目录创建一个git仓库，使用如下指令：\ngit init 然后在喜欢的主题下面找到下载，进入得到对应的项目地址，使用如下指令将主题作为子模块克隆到本地网站根目录，这里实例使用了hugo官方的实例，可以根据个人选择修改网址，需要注意的是，不同的主题可能支持不同的特性，可能需要根据需求查看原文档获取详细的使用方法，本站所使用的主题为Book，后面我会单独发一篇文章分享该主题的详细设置：\ngit submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 克隆完主题后需要设置网站使用的主题，Hugo官方给出的是使用指令：\necho \u0026#34;theme = \u0026#39;ananke\u0026#39;\u0026#34; \u0026gt;\u0026gt; hugo.toml 这里我个人不推荐使用该方法，因为powershell和本地编码的问题，有时候或许会插入一些错误字符，个人建议直接打开网站根目录下的hugo.toml直接进行配置。在该文件中配置title后面单引号字符串为网站标题，baseURL为网站根域名，如果这里没有的话暂时不做处理，在title下面新开一行theme，后面的字符串为网站根目录下themes中的主题文件夹的文件夹名，如果配置好了应该是这样的：\nbaseURL = \u0026#39;https://meirgoo.net/\u0026#39; languageCode = \u0026#39;zh-cn\u0026#39; title = \u0026#39;Meirgoo Site\u0026#39; theme = \u0026#39;hugo-book\u0026#39; [caches] [caches.images] dir = \u0026#39;:cacheDir/images\u0026#39; 完成这些步骤后使用如下命令就可以在本地看到自己的网站了:\nhugo server 此时网站会自动编译并且部署到本地服务器，如果看到输出的结尾是：\nWeb Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 那就说明编译部署成功，此时可以在浏览器访问链接中的地址看到自己的网站了，如果想要退出，可以在powershell中使用ctrl+C组合键，或者直接关闭powershell都是可以的。\n在上一步中已经成功使用hugo完成了静态站点的建立，并且成功渲染，但是只能在本地访问，现在想要把网站部署到网络上允许公开访问，可能有部分人认为部署网站需要服务器、域名，如果在国内还有备案要求等等，但事实上这些绝大部分并不是必须的，如果想要一个动态的网站，那么一台服务器基本是必不可少的，如果是纯粹的静态网站，目前已经有了许多种免费方案，虽然在带宽流量方面略有限制，但是对访问量不高的个人小站点来说绝对是绰绰有余，我个人用过的方案有vercel和github page，本文选择使用github page方式实现。\n在之前的步骤中已经使用了git安装主题，因此到了这一步默认已经安装好git，如果没有，返回到第六步安装git。\n什么是git，简单来说就是一个项目仓库方面的网站，也有其他的一些服务，更多的内容不多赘述，现在我们要做的就是把本地的网站项目链接到这个网站上的一个仓库中，并且使用仓库的自动流功能自动部署，这样每次完成网站的更新后就可以将更改推送到远程仓库并由仓库自动完成部署。\n首选需要对git进行配置，运行以下指令：\ngit config --global user.email \u0026#34;邮箱\u0026#34; git config --global user.name 用户名 然后运行以下指令：\nssh-keygen -t rsa -C \u0026#34;xxxxxx@outlook.com\u0026#34; 双引号内的内容更换为自己的邮箱，保留双引号。此时系统中会生成一个用于验证身份的密钥，后续会询问密钥存储位置和加密指令，如果不需要的话可以按几下回车跳过。\n注意！密钥的公钥和私钥是验证身份用的，如果珍惜账号，以及仓库内的内容，请勿随意泄露，丢失可以重新生成，泄露了需要在账号后台中及时取消密钥可用性，确保账号安全。\n现在登陆github网站，点击右上角头像，选择Settings，在左侧的\u0026quot;SSH and GPG keys\u0026quot;中点击\u0026quot;New SSH key\u0026quot;，在\u0026quot;Title\u0026quot;中为密钥填写一个名称，然后将默认位置为\u0026quot;C:\\Users\\用户名\\.ssh\\id_rsa.pub\u0026quot;中的内容以记事本打开，并将内容粘贴到\u0026quot;Key\u0026quot;中，保存。\n如果想作废某个身份凭证来这里删除key就可以。\n现在点击左上角的猫头，左侧仓库选择\u0026quot;New\u0026quot;，新建两个仓库。\n第一个仓库名称一定是\u0026quot;用户名.github.io\u0026quot;，公开(Public)表示，只有这样命名才表示这是用户的一个个人网站，只有公开仓库对外展示的内容会放在这里，建议选择不添加README.md，建立完成后来到项目的设置页面，在Pages选项卡中将Branch下的None更改为main。\n第二个仓库可以随意命名，建议私有(Private)表示，这里是施工现场，如果公开表示可能会有不想公开的内容泄露，因此一般私有，如果没有有价值内容，用户认为公开无所谓，那也行，同样建议选择不添加README.md。\n同样点击右上角来到个人设置，拖到页面最低端，点击左侧\u0026quot;Developer settings\u0026quot;，在下面的\u0026quot;Personal access tokens\u0026quot;下选择\u0026quot;Fine-grained tokens\u0026quot;点击右上角\u0026quot;Generate new token\u0026quot;生成新令牌，注意该令牌需要绝对保密。\n在之后的令牌名输入一个好记的令牌名，我用的是\u0026quot;Github page action token\u0026quot;，默认三十天旗下可以更改为无限期(No expiration)，可访问仓库(Repository access)更改为第三个仅选择的仓库(Only select repositories)，之后选择公开的仓库，也就是\u0026quot;用户名.github.io\u0026quot;的仓库，并在下面的仓库权限(Repositories permissions)将目录(Contents)更改为允许读写(Read and Write)。\n设置完成后生成仓库并且复制得到的key，关闭页面后是看不到这个key的，回到项目仓库的设置，在秘密和变量(Secrets and variables)的action中新建一个仓库秘密(New repository secret)，填写一个好记的名称并且在下面粘贴刚刚生成的公有仓库的key，此时该私有项目仓库就有了读写公有网站仓库的权限，之后网站的更新可以完全在私有的环境下部署到公开站点。\n在本地文件系统的项目中新建 .github 文件夹，在其中新建一个 hugo.yaml 的文本文件，复制以下内容进去：\nname: GitHub Pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-22.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - uses: actions/checkout@v4 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#39;latest\u0026#39; extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: personal_token: ${{ secrets.Deploy }} external_repository: Meirgoo/Meirgoo.github.io keep_files: false publish_branch: main publish_dir: ./public cname: 在这里需要修改部分内容，将personnal_token后面的secrets.Deploy的\u0026quot;Deploy\u0026quot;部分更改为刚刚你设置好的仓库访问令牌名称，目标仓库(external_repository)后面的内容更改为 用户名/用户名.gtihub.io 最后的cname需要填写自己的域名，如果没有自己的域名可以写 用户名.github.io 。\n现在来到施工现场的仓库，可以看到一些指令提示，不用管，说明目前仓库中没有内容，回到powershell中，确定路径是网站根项目文件夹，依次运行施工现场底部三条指令，为项目添加一个远程源，然后运行指令：\ngit add . git commit -m \u0026#34;init\u0026#34; git push 这些指令的意思是，将所有文件添加到更改，提交并且备注\u0026quot;init\u0026quot;，注意提交后不等于提交到远程仓库，push才是推送到远程仓库。\n如果顺利的话，就可以在建立的私有项目中看到文件，等待几分钟后可以在公有项目中看到生成好的文件，此时可以尝试通过 用户名.github.io 进行访问。\n现在已经完成了网站的建立，那么怎么完成内容更新呢？同样采用类似的方式，只是比起完整建站简单的多。\n回到网站根项目中，可以看到一个\u0026quot;content\u0026quot;文件夹，这个文件夹就是网站内容的存放位置，当然会根据网站主题的不同，目录组织方式有所不同，有些主题对文件结构有所要求，具体情况需要具体分析，hugo的内容主要是以Markdown语言构成的，想要添加一个新的md文件，需要在网站根目录下运行如下指令：\nhugo new ./content/文件名.md 然后可以打开这个文件进行编辑，这里推荐使用vscode方式，可以使用以下指令安装vscode：\nwinget install Microsoft.VisualStudioCode 打开文件编辑后，想要上传到网站，则需要类似于远程仓库初始化将本地项目上传到github，同样在网站根目录下运行指令：\ngit add . git commit -m \u0026#34;update\u0026#34; git push 之后的内容就由Action自动渲染发布。\n结语 这篇内容是我个人建立站点的全步骤，它当然不全，还有些是我比较个人化的内容或者没有完全理解的内容，例如DNS配置，域名购买，页面的进一步扩展，这些内容都需要我继续深入后才能写，目前还是比较粗糙的，我会随着其余内容的添加慢慢修改这篇内容。\n","permalink":"https://meirgoo.net/tech/hugo-website/","summary":"从本站点构建与部署的实际经验出发，教你零基础使用hugo构建自己的个人博客并部署在Github pages中，在互联网中开辟自己的半永久的一亩三分地。","title":"零基础构建个人博客：Hugo搭建和Github部署"},{"content":"前言 1993年，id Software为《DOOM》设计的WAD（Where’s All the Data）文件格式开创了游戏模组社区的先河。30多年后，在一次次的内容整理以及尝试寻找更优质的过程中，我又一次的开始思考起这个问题，在现在的互联网中，哪些数据是真的由我所有？我真的知道自己的数据都在哪里吗？我的数据在哪里？\n现代人的数字生命 很多年前流行一个说法，叫做“地球村”，是指互联网可以把全球各地的人随时随地连接到一起。当我们对这些习以为常之后，这个说法已经很少听说。现在几乎每个人都存在网络中的社交，网络中的购物，夸张的说一切的一切都有一份互联网的版本，在现实生活之外，每个人都有一个互联网的身份，都有一个存活在数据中的“备份”，所有产生的数据构成了这个生命本身。\n就像我们在日常生活中会谈断舍离一样，这个数字生命并不是所有的部分都有实际意义。没有人会去记录一个平常的日子吃了什么午餐，留下的数据中访问某个页面多久，在某个位置消耗了多少注意力，这些数据对个人来讲同样没有任何价值。在大多数情况下，我们所关注的数据只有很少的并且不可再生的一部分。\n在收藏数据时，我经常用的一个标准是“可再生”，代表了数据的寿命和可恢复性，例如，如果有人分享了一份非常稀有的资源，并且是以易失方式分享的，那么这份数据就是不可再生的资源，需要及时保存，一旦错过就很难再次获取。\n类似于热门软件安装包、游戏文件等等类似的公开发行的内容，可以做出一个大胆的推论，这些数据是“半永生”的，首先是有一个稳定的公司或者组织提供内容，其次即使因为某些原因导致内容失效，在保有量足够大的情况下也会有人可以再次提供，相当于保存在一个巨大的P2P网络中，可以视为某种程度上的“永生”。\n但是类似的保存在公有领域的数据并不适合个人数据，那么个人数据又该如何选择保存方式呢？\n数据生命线 在数据保存领域有一个理论，叫做3-2-1法则，也就是：\n3份文件，一份原件，两份备份。 2种介质，简单说不要存储单一硬件上。 1份异地。 看上去很复杂，实际也很复杂，很多家庭并不会配备NAS，手动备份和异地备份都是相当麻烦的事情，当然我也不会轻易尝试这个备份法则的实践，我个人在数据备份和管理上的实践倾向于网络备份，对于那些有稳定服务且不涉及隐私的公司，大部分数据就交给公司直接处理。\n对于没有这种服务的公司，我会把部分核心数据保存在网盘，我个人常用的网盘是Onedrive，对于少量的极其重要的文本类型的内容，我会直接保存在Github上，我相信作为代码的版本控制网站，在数据备份和永久化保存方面，会比个人完善的多得多，并且版本控制功能也非常适合更新历史记录和增量更新。\n看上去网络备份是一个非常完善的方案，如果有稳定的公司做服务的话，我相信对于没有专业备份的用户来说，数据寿命会长的多。但由此也衍生出了一个问题，互联网中的数据，到底归谁所有。\n云端迷城与本地堡垒 三年前被Notion的颜值蛊惑，兴冲冲把日记本搬上云端。但数次在互联网环境不太好，DNS污染严重的地区，我无法获取任何我的个人数据，那时候瞬间悟了：把全部身家托付云端，就像把存折交给海鸥保管——优雅是优雅，就是取钱得看潮汐。\n先来科普一下Notion这个软件，Notion是国外出品的一款笔记软件，我个人也非常喜欢Notion的简约设计。\n但是，Notion在我看来最大的一个缺点是，整个服务全部都是云端的。\n也就是说，如果我在一个网络不好的环境中，或者没有网络的环境中，是不能使用Notion的。虽然现在完全和网络分离的环境比较少，但总归不能排除这种可能，这就意味着，假如我暂离了网络，或者Notion运营方出现了故障，再或者国内特殊的网络环境出现变化，我将找不回我的任何数据，我的所有数据实际上并不在我的手中。\n在当时，我只写了少量几篇文章，并没有什么价值，但是这种“不稳定”的状态还是促使我换一种解决方案，因此我改用Github Pages的方案搭建起了现在这个博客。虽然没有什么是永恒的，但我相信Github的性质和运行决定了这一组合远比Notion要稳定得多，平常我可以简单的将本地和云端进行同步，即使是在最坏的结果下，我仍然可以在本地保有我所有的数据，有选择，就是Notion所不能带给我的安全感。\n本地硬盘是贴身日记本。\n私有仓库像上锁的保险箱。\n公开部署则是临街橱窗。\n数字方舟建造指南 理想的存储方案就像寻找三体运动中的稳定解，需在多个维度间找平衡：\n安全vs便捷：\nNAS像是自家金库，安全但得操心防潮防火；网盘好比银行保险箱，省心却要看人脸色。我的折中方案是把私密照片存加密硬盘，工作文档放企业云盘，至于猫片？当然要上传到宠物社区接受云撸猫。\n当下vs未来：\n用Word写稿时总担心.doc格式有天变成数字甲骨文，现在改投Markdown阵营，仿佛给文字买了终身保险。有次打开2005年的.txt文件，纯文本的质朴反而比花哨的富文本更经得起时间考验。\n公有vs私有：\n把游记同步到博客像是往海里扔漂流瓶，某天竟收到南极科考队员的评论；而私密日记用Veracrypt加密，密码强度高得自己都常输错。这种公私分明的存储方式，倒像是给数据世界划出了客厅与卧室。\n还有一种存储方式是直接把内容放到媒体网站上，也可以视为一种存储，只是允许公开查看，如果愿意接受把发布内容作为一种形式也可以，比如为了记录我的游戏履历，我也会在Bilibili上传我的游戏录像，因为这些数据并不是什么隐私数据，也没有更深层次的内容，公开发布允许任何人查看，并且作为私人的一种存储方式完全可行。\n纯网络存储方案最大的问题也就在纯网络上，全部数据漂浮在云端同样会带来非常大的限制，比如我之前使用的Notion，在网络不好的情况下就等同于我失去了我的数据，类似的云手机云电脑的概念，看上去都像是一种胡闹。\n现在无论是手机系统还是打开某个网盘性质的软件，都会弹出各种帮你备份的提示，或者各种请求去访问你的私人数据帮你备份，这种情况下本地数据也会在网盘有同样的一份备份，在换机之后，在各种环境下，基本都不会失去自己的数据，而且成本好像也并不高，但是真的有这么好的事吗？\n便利性与控制权的永恒博弈 当我们讨论云存储时，本质上在探讨一个现代性悖论：你愿不愿意为了便利性放弃隐私。\n国内网盘的\u0026quot;净网事件\u0026quot;以及百度千金“开盒事件”揭示了一个残酷现实：存储在他人服务器上的数据，本质上是一份数字人质，等于把自己的数字身份交给厂商。百度网盘将用户文件替换为8秒警告视频的操作，堪比数字版的\u0026quot;特洛伊木马\u0026quot;——你以为在运输家具，实则运送着随时可能自毁的定时炸弹。百度千金通过系统直接开盒个人则揭示了这些互联网公司并没有任何工程伦理的道德底线，服务商就是最大的风险本身。\n现在来讨论一个问题，用户在云端存储的数据属于用户还是数据服务商？这一点显然没有争议，服务商只是“代替”用户“保管”数据，原数据百分百属于用户，但是如果根据法律要求，服务商需要审查用户数据，又该如何对待用户的数据呢？厂商有资格审查用户存储的文件吗？涉及到的隐私问题又该由谁承担？\n从已有的例子来看，网盘的服务商大多并不遵守对个人隐私权的保护，随意审查删除更换用户的数据，还有些更为现实的例子，例如国内的互联网服务基本都是手机认证实现实名，如果更换手机号后其他人买到了这个手机号，没有更换绑定手机号的账户所有数据等于完全泄露。\n并且云盘也是一个相当强力的垄断渠道，设想一个场景，你在某手机厂商自带的云存储中存了几十GB的私人数据，那么下次换手机你会换其他厂商的吗？当然是可以换，但是显然会出现大量的数据迁移成本，如果是嫌麻烦的用户，那么就相当于用户绑定了该厂商而丧失了部分选择权。\n当你的数字记忆被封装在某个品牌云空间时，换机决策就变成了情感勒索：是承受数据迁移的阵痛，还是继续被生态链温柔禁锢？\n在比特之海抛下锚点 数字资产的价值不在于字节数量，而在于其承载的生命密度。当我们用RAID阵列守护家庭影像，用Git版本控制记录思想轨迹，本质上是在虚拟世界中复刻原始人的篝火仪式——用有序的存储对抗熵增，用可控的存档延展记忆。\n下次点击\u0026quot;上传\u0026quot;按钮前，不妨自问：如果明天所有云服务同时消失，我的数字存在能否在本地硬盘上完成文明重启？这个问题的答案，就是你在比特海洋中的诺亚方舟。\n","permalink":"https://meirgoo.net/markdown/wad/","summary":"由一次网站迁移记录自己关于数据的寿命以及所有权的思考，在现代互联中，我们应该如果考虑自己的数据安全以及对应的隐私问题，我们应该如何选择自己的数据保存方式。","title":"我的数据在哪里？从一次数据迁移看数据寿命与所有权"}]